/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export declare namespace IEVMVaultFactory {
  export type CreateNewVaultParamsStruct = {
    name: string;
    symbol: string;
    underlying: string;
    protocolHelper: string;
    authority: string;
    initDepositAmount: BigNumberish;
    minDepositAmount: BigNumberish;
    maxDepositAmount: BigNumberish;
    deadline: BigNumberish;
  };

  export type CreateNewVaultParamsStructOutput = [
    string,
    string,
    string,
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    name: string;
    symbol: string;
    underlying: string;
    protocolHelper: string;
    authority: string;
    initDepositAmount: BigNumber;
    minDepositAmount: BigNumber;
    maxDepositAmount: BigNumber;
    deadline: BigNumber;
  };
}

export interface EVMVaultInterface extends utils.Interface {
  functions: {
    "DEPOSIT_TYPEHASH()": FunctionFragment;
    "EXECUTE_TYPEHASH()": FunctionFragment;
    "WITHDRAW_TYPEHASH()": FunctionFragment;
    "allowance(address,address)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "authority()": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "collectCreatorFees(address)": FunctionFragment;
    "collectFees(address)": FunctionFragment;
    "creatorFees()": FunctionFragment;
    "decimals()": FunctionFragment;
    "deposit(uint256,address,uint256,uint256,bytes)": FunctionFragment;
    "eip712Domain()": FunctionFragment;
    "execute(address[],bytes[],uint256,bytes)": FunctionFragment;
    "factory()": FunctionFragment;
    "getVaultValue()": FunctionFragment;
    "maxDepositAmount()": FunctionFragment;
    "minDepositAmount()": FunctionFragment;
    "name()": FunctionFragment;
    "protocolHelper()": FunctionFragment;
    "shareRate()": FunctionFragment;
    "symbol()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "underlying()": FunctionFragment;
    "updateMaxDepositAmount(uint256)": FunctionFragment;
    "updateMinDepositAmount(uint256)": FunctionFragment;
    "userDeposited(address)": FunctionFragment;
    "userLastActions(address)": FunctionFragment;
    "vaultFees()": FunctionFragment;
    "withdraw(bytes16,address,uint256,uint256,uint256,uint256,uint256,bytes)": FunctionFragment;
    "withdrawIds(bytes16)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "DEPOSIT_TYPEHASH"
      | "EXECUTE_TYPEHASH"
      | "WITHDRAW_TYPEHASH"
      | "allowance"
      | "approve"
      | "authority"
      | "balanceOf"
      | "collectCreatorFees"
      | "collectFees"
      | "creatorFees"
      | "decimals"
      | "deposit"
      | "eip712Domain"
      | "execute"
      | "factory"
      | "getVaultValue"
      | "maxDepositAmount"
      | "minDepositAmount"
      | "name"
      | "protocolHelper"
      | "shareRate"
      | "symbol"
      | "totalSupply"
      | "transfer"
      | "transferFrom"
      | "underlying"
      | "updateMaxDepositAmount"
      | "updateMinDepositAmount"
      | "userDeposited"
      | "userLastActions"
      | "vaultFees"
      | "withdraw"
      | "withdrawIds"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "DEPOSIT_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "EXECUTE_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "WITHDRAW_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "authority", values?: undefined): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "collectCreatorFees",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "collectFees", values: [string]): string;
  encodeFunctionData(
    functionFragment: "creatorFees",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish, string, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "eip712Domain",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "execute",
    values: [string[], BytesLike[], BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "factory", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getVaultValue",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxDepositAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minDepositAmount",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "protocolHelper",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "shareRate", values?: undefined): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "underlying",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateMaxDepositAmount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateMinDepositAmount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "userDeposited",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "userLastActions",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "vaultFees", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [
      BytesLike,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawIds",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "DEPOSIT_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "EXECUTE_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "WITHDRAW_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "authority", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "collectCreatorFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collectFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "creatorFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "eip712Domain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "execute", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "factory", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getVaultValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxDepositAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minDepositAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "protocolHelper",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "shareRate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "underlying", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateMaxDepositAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateMinDepositAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userDeposited",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userLastActions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vaultFees", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawIds",
    data: BytesLike
  ): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "Deposited(address,uint256)": EventFragment;
    "EIP712DomainChanged()": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
    "Withdrawn(bytes16,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Deposited"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EIP712DomainChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdrawn"): EventFragment;
}

export interface ApprovalEventObject {
  owner: string;
  spender: string;
  value: BigNumber;
}
export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  ApprovalEventObject
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface DepositedEventObject {
  user: string;
  amount: BigNumber;
}
export type DepositedEvent = TypedEvent<
  [string, BigNumber],
  DepositedEventObject
>;

export type DepositedEventFilter = TypedEventFilter<DepositedEvent>;

export interface EIP712DomainChangedEventObject {}
export type EIP712DomainChangedEvent = TypedEvent<
  [],
  EIP712DomainChangedEventObject
>;

export type EIP712DomainChangedEventFilter =
  TypedEventFilter<EIP712DomainChangedEvent>;

export interface TransferEventObject {
  from: string;
  to: string;
  value: BigNumber;
}
export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  TransferEventObject
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface WithdrawnEventObject {
  withdrawId: string;
  user: string;
  amount: BigNumber;
}
export type WithdrawnEvent = TypedEvent<
  [string, string, BigNumber],
  WithdrawnEventObject
>;

export type WithdrawnEventFilter = TypedEventFilter<WithdrawnEvent>;

export interface EVMVault extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: EVMVaultInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DEPOSIT_TYPEHASH(overrides?: CallOverrides): Promise<[string]>;

    EXECUTE_TYPEHASH(overrides?: CallOverrides): Promise<[string]>;

    WITHDRAW_TYPEHASH(overrides?: CallOverrides): Promise<[string]>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    approve(
      spender: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    authority(overrides?: CallOverrides): Promise<[string]>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    collectCreatorFees(
      receiver: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    collectFees(
      receiver: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    creatorFees(overrides?: CallOverrides): Promise<[BigNumber]>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    deposit(
      amount: BigNumberish,
      user: string,
      vaultTvl: BigNumberish,
      deadline: BigNumberish,
      signature: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    eip712Domain(
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, BigNumber, string, string, BigNumber[]] & {
        fields: string;
        name: string;
        version: string;
        chainId: BigNumber;
        verifyingContract: string;
        salt: string;
        extensions: BigNumber[];
      }
    >;

    execute(
      targets: string[],
      data: BytesLike[],
      deadline: BigNumberish,
      signature: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    factory(overrides?: CallOverrides): Promise<[string]>;

    getVaultValue(overrides?: CallOverrides): Promise<[BigNumber]>;

    maxDepositAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    minDepositAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    protocolHelper(overrides?: CallOverrides): Promise<[string]>;

    shareRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      to: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    transferFrom(
      from: string,
      to: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    underlying(overrides?: CallOverrides): Promise<[string]>;

    updateMaxDepositAmount(
      newMaxDepositAmount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    updateMinDepositAmount(
      newMinDepositAmount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    userDeposited(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    userLastActions(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    vaultFees(overrides?: CallOverrides): Promise<[BigNumber]>;

    withdraw(
      withdrawId: BytesLike,
      user: string,
      amountOut: BigNumberish,
      vaultTvl: BigNumberish,
      vaultFee: BigNumberish,
      creatorFee: BigNumberish,
      deadline: BigNumberish,
      signature: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    withdrawIds(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  DEPOSIT_TYPEHASH(overrides?: CallOverrides): Promise<string>;

  EXECUTE_TYPEHASH(overrides?: CallOverrides): Promise<string>;

  WITHDRAW_TYPEHASH(overrides?: CallOverrides): Promise<string>;

  allowance(
    owner: string,
    spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  approve(
    spender: string,
    value: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  authority(overrides?: CallOverrides): Promise<string>;

  balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  collectCreatorFees(
    receiver: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  collectFees(
    receiver: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  creatorFees(overrides?: CallOverrides): Promise<BigNumber>;

  decimals(overrides?: CallOverrides): Promise<number>;

  deposit(
    amount: BigNumberish,
    user: string,
    vaultTvl: BigNumberish,
    deadline: BigNumberish,
    signature: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  eip712Domain(
    overrides?: CallOverrides
  ): Promise<
    [string, string, string, BigNumber, string, string, BigNumber[]] & {
      fields: string;
      name: string;
      version: string;
      chainId: BigNumber;
      verifyingContract: string;
      salt: string;
      extensions: BigNumber[];
    }
  >;

  execute(
    targets: string[],
    data: BytesLike[],
    deadline: BigNumberish,
    signature: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  factory(overrides?: CallOverrides): Promise<string>;

  getVaultValue(overrides?: CallOverrides): Promise<BigNumber>;

  maxDepositAmount(overrides?: CallOverrides): Promise<BigNumber>;

  minDepositAmount(overrides?: CallOverrides): Promise<BigNumber>;

  name(overrides?: CallOverrides): Promise<string>;

  protocolHelper(overrides?: CallOverrides): Promise<string>;

  shareRate(overrides?: CallOverrides): Promise<BigNumber>;

  symbol(overrides?: CallOverrides): Promise<string>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    to: string,
    value: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  transferFrom(
    from: string,
    to: string,
    value: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  underlying(overrides?: CallOverrides): Promise<string>;

  updateMaxDepositAmount(
    newMaxDepositAmount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  updateMinDepositAmount(
    newMinDepositAmount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  userDeposited(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  userLastActions(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  vaultFees(overrides?: CallOverrides): Promise<BigNumber>;

  withdraw(
    withdrawId: BytesLike,
    user: string,
    amountOut: BigNumberish,
    vaultTvl: BigNumberish,
    vaultFee: BigNumberish,
    creatorFee: BigNumberish,
    deadline: BigNumberish,
    signature: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  withdrawIds(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    DEPOSIT_TYPEHASH(overrides?: CallOverrides): Promise<string>;

    EXECUTE_TYPEHASH(overrides?: CallOverrides): Promise<string>;

    WITHDRAW_TYPEHASH(overrides?: CallOverrides): Promise<string>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    authority(overrides?: CallOverrides): Promise<string>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    collectCreatorFees(
      receiver: string,
      overrides?: CallOverrides
    ): Promise<void>;

    collectFees(receiver: string, overrides?: CallOverrides): Promise<void>;

    creatorFees(overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<number>;

    deposit(
      amount: BigNumberish,
      user: string,
      vaultTvl: BigNumberish,
      deadline: BigNumberish,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    eip712Domain(
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, BigNumber, string, string, BigNumber[]] & {
        fields: string;
        name: string;
        version: string;
        chainId: BigNumber;
        verifyingContract: string;
        salt: string;
        extensions: BigNumber[];
      }
    >;

    execute(
      targets: string[],
      data: BytesLike[],
      deadline: BigNumberish,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    factory(overrides?: CallOverrides): Promise<string>;

    getVaultValue(overrides?: CallOverrides): Promise<BigNumber>;

    maxDepositAmount(overrides?: CallOverrides): Promise<BigNumber>;

    minDepositAmount(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<string>;

    protocolHelper(overrides?: CallOverrides): Promise<string>;

    shareRate(overrides?: CallOverrides): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<string>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      to: string,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferFrom(
      from: string,
      to: string,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    underlying(overrides?: CallOverrides): Promise<string>;

    updateMaxDepositAmount(
      newMaxDepositAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateMinDepositAmount(
      newMinDepositAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    userDeposited(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    userLastActions(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    vaultFees(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      withdrawId: BytesLike,
      user: string,
      amountOut: BigNumberish,
      vaultTvl: BigNumberish,
      vaultFee: BigNumberish,
      creatorFee: BigNumberish,
      deadline: BigNumberish,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawIds(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "Approval(address,address,uint256)"(
      owner?: string | null,
      spender?: string | null,
      value?: null
    ): ApprovalEventFilter;
    Approval(
      owner?: string | null,
      spender?: string | null,
      value?: null
    ): ApprovalEventFilter;

    "Deposited(address,uint256)"(
      user?: string | null,
      amount?: null
    ): DepositedEventFilter;
    Deposited(user?: string | null, amount?: null): DepositedEventFilter;

    "EIP712DomainChanged()"(): EIP712DomainChangedEventFilter;
    EIP712DomainChanged(): EIP712DomainChangedEventFilter;

    "Transfer(address,address,uint256)"(
      from?: string | null,
      to?: string | null,
      value?: null
    ): TransferEventFilter;
    Transfer(
      from?: string | null,
      to?: string | null,
      value?: null
    ): TransferEventFilter;

    "Withdrawn(bytes16,address,uint256)"(
      withdrawId?: BytesLike | null,
      user?: string | null,
      amount?: null
    ): WithdrawnEventFilter;
    Withdrawn(
      withdrawId?: BytesLike | null,
      user?: string | null,
      amount?: null
    ): WithdrawnEventFilter;
  };

  estimateGas: {
    DEPOSIT_TYPEHASH(overrides?: CallOverrides): Promise<BigNumber>;

    EXECUTE_TYPEHASH(overrides?: CallOverrides): Promise<BigNumber>;

    WITHDRAW_TYPEHASH(overrides?: CallOverrides): Promise<BigNumber>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    authority(overrides?: CallOverrides): Promise<BigNumber>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    collectCreatorFees(
      receiver: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    collectFees(
      receiver: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    creatorFees(overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    deposit(
      amount: BigNumberish,
      user: string,
      vaultTvl: BigNumberish,
      deadline: BigNumberish,
      signature: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    eip712Domain(overrides?: CallOverrides): Promise<BigNumber>;

    execute(
      targets: string[],
      data: BytesLike[],
      deadline: BigNumberish,
      signature: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    factory(overrides?: CallOverrides): Promise<BigNumber>;

    getVaultValue(overrides?: CallOverrides): Promise<BigNumber>;

    maxDepositAmount(overrides?: CallOverrides): Promise<BigNumber>;

    minDepositAmount(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    protocolHelper(overrides?: CallOverrides): Promise<BigNumber>;

    shareRate(overrides?: CallOverrides): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      to: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    underlying(overrides?: CallOverrides): Promise<BigNumber>;

    updateMaxDepositAmount(
      newMaxDepositAmount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    updateMinDepositAmount(
      newMinDepositAmount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    userDeposited(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    userLastActions(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    vaultFees(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      withdrawId: BytesLike,
      user: string,
      amountOut: BigNumberish,
      vaultTvl: BigNumberish,
      vaultFee: BigNumberish,
      creatorFee: BigNumberish,
      deadline: BigNumberish,
      signature: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    withdrawIds(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    DEPOSIT_TYPEHASH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    EXECUTE_TYPEHASH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    WITHDRAW_TYPEHASH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      spender: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    authority(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    balanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    collectCreatorFees(
      receiver: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    collectFees(
      receiver: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    creatorFees(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deposit(
      amount: BigNumberish,
      user: string,
      vaultTvl: BigNumberish,
      deadline: BigNumberish,
      signature: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    eip712Domain(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    execute(
      targets: string[],
      data: BytesLike[],
      deadline: BigNumberish,
      signature: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    factory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getVaultValue(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxDepositAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minDepositAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    protocolHelper(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    shareRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      to: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    transferFrom(
      from: string,
      to: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    underlying(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    updateMaxDepositAmount(
      newMaxDepositAmount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    updateMinDepositAmount(
      newMinDepositAmount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    userDeposited(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userLastActions(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    vaultFees(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdraw(
      withdrawId: BytesLike,
      user: string,
      amountOut: BigNumberish,
      vaultTvl: BigNumberish,
      vaultFee: BigNumberish,
      creatorFee: BigNumberish,
      deadline: BigNumberish,
      signature: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    withdrawIds(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
